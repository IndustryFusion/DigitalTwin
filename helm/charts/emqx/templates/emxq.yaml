apiVersion: apps.emqx.io/v2beta1
kind: EMQX
metadata:
    name: emqx
spec:
    image: {{ .Values.externalRegistry }}/emqx:5.1
    coreTemplate:
        spec:
            replicas: {{ .Values.emqx.replicas }}
            extraVolumes:
              - name: emqx-tls
                secret:
                    secretName: emqx-crt-secret
            extraVolumeMounts:
              - name: emqx-tls
                mountPath: /mounted/cert
            {{- if .Values.emqx.resources }}
            resources:
                {{- with .Values.emqx.resources }}
                requests: 
                    memory: {{ .requests.memory }}
                    cpu: {{ .requests.cpu }}
                limits:
                    memory: {{ .limits.memory }}
                    cpu: {{ .limits.cpu }}
                {{- end }}
            {{- end }}
    dashboardServiceTemplate:
        spec:
            type: LoadBalancer
    listenersServiceTemplate:
        spec:
            type: LoadBalancer
    config:
        data: |
            authentication {
                mechanism = password_based
                backend = http
                enable = true

                method = get
                url = "http://{{ .Values.mqtt.bridge.url }}:{{ .Values.mqtt.bridge.port }}/auth"
                body {
                    username = "${username}"
                    password = "${password}"
                    clientid = "${clientid}"
                }
                headers {
                    "X-Request-Source" = "EMQX"
                }
            }
            authorization {
                sources = [
                {
                    type = http
                    enable = true
                
                    method = get
                    url = "http://{{ .Values.mqtt.bridge.url }}:{{ .Values.mqtt.bridge.port }}/acl"
                    body {
                        username = "${username}"
                        topic = "${topic}"
                        clientid = "${clientid}"
                    }
                    headers {
                        "X-Request-Source" = "EMQX"
                    }
                }
                ]
                no_match = allow
                deny_action = ignore
                cache {
                enable = true
                max_size = 32
                ttl = 1m
                }
            }
            listeners.ssl.default {
                bind = "0.0.0.0:8883"
                ssl_options {
                    cacertfile = "/mounted/cert/ca.crt"
                    certfile = "/mounted/cert/tls.crt"
                    keyfile = "/mounted/cert/tls.key"
                    gc_after_handshake = true
                    handshake_timeout = 5s
                }
            }

